// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class TokenExchange extends ethereum.Event {
  get params(): TokenExchange__Params {
    return new TokenExchange__Params(this);
  }
}

export class TokenExchange__Params {
  _event: TokenExchange;

  constructor(event: TokenExchange) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sold_id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokens_sold(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bought_id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokens_bought(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TokenExchangeUnderlying extends ethereum.Event {
  get params(): TokenExchangeUnderlying__Params {
    return new TokenExchangeUnderlying__Params(this);
  }
}

export class TokenExchangeUnderlying__Params {
  _event: TokenExchangeUnderlying;

  constructor(event: TokenExchangeUnderlying) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sold_id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokens_sold(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bought_id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokens_bought(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class AddLiquidity extends ethereum.Event {
  get params(): AddLiquidity__Params {
    return new AddLiquidity__Params(this);
  }
}

export class AddLiquidity__Params {
  _event: AddLiquidity;

  constructor(event: AddLiquidity) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token_amounts(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get fees(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get invariant(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get token_supply(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RemoveLiquidity extends ethereum.Event {
  get params(): RemoveLiquidity__Params {
    return new RemoveLiquidity__Params(this);
  }
}

export class RemoveLiquidity__Params {
  _event: RemoveLiquidity;

  constructor(event: RemoveLiquidity) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token_amounts(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get fees(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get token_supply(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RemoveLiquidityOne extends ethereum.Event {
  get params(): RemoveLiquidityOne__Params {
    return new RemoveLiquidityOne__Params(this);
  }
}

export class RemoveLiquidityOne__Params {
  _event: RemoveLiquidityOne;

  constructor(event: RemoveLiquidityOne) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token_amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get coin_amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RemoveLiquidityImbalance extends ethereum.Event {
  get params(): RemoveLiquidityImbalance__Params {
    return new RemoveLiquidityImbalance__Params(this);
  }
}

export class RemoveLiquidityImbalance__Params {
  _event: RemoveLiquidityImbalance;

  constructor(event: RemoveLiquidityImbalance) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token_amounts(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get fees(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get invariant(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get token_supply(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CommitNewAdmin extends ethereum.Event {
  get params(): CommitNewAdmin__Params {
    return new CommitNewAdmin__Params(this);
  }
}

export class CommitNewAdmin__Params {
  _event: CommitNewAdmin;

  constructor(event: CommitNewAdmin) {
    this._event = event;
  }

  get deadline(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CommitNewFee extends ethereum.Event {
  get params(): CommitNewFee__Params {
    return new CommitNewFee__Params(this);
  }
}

export class CommitNewFee__Params {
  _event: CommitNewFee;

  constructor(event: CommitNewFee) {
    this._event = event;
  }

  get deadline(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get admin_fee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewAdmin extends ethereum.Event {
  get params(): NewAdmin__Params {
    return new NewAdmin__Params(this);
  }
}

export class NewAdmin__Params {
  _event: NewAdmin;

  constructor(event: NewAdmin) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewFee extends ethereum.Event {
  get params(): NewFee__Params {
    return new NewFee__Params(this);
  }
}

export class NewFee__Params {
  _event: NewFee;

  constructor(event: NewFee) {
    this._event = event;
  }

  get fee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get admin_fee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CommitNewParameters extends ethereum.Event {
  get params(): CommitNewParameters__Params {
    return new CommitNewParameters__Params(this);
  }
}

export class CommitNewParameters__Params {
  _event: CommitNewParameters;

  constructor(event: CommitNewParameters) {
    this._event = event;
  }

  get deadline(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get A(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get admin_fee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewParameters extends ethereum.Event {
  get params(): NewParameters__Params {
    return new NewParameters__Params(this);
  }
}

export class NewParameters__Params {
  _event: NewParameters;

  constructor(event: NewParameters) {
    this._event = event;
  }

  get A(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get admin_fee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RampA extends ethereum.Event {
  get params(): RampA__Params {
    return new RampA__Params(this);
  }
}

export class RampA__Params {
  _event: RampA;

  constructor(event: RampA) {
    this._event = event;
  }

  get old_A(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get new_A(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get initial_time(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get future_time(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StopRampA extends ethereum.Event {
  get params(): StopRampA__Params {
    return new StopRampA__Params(this);
  }
}

export class StopRampA__Params {
  _event: StopRampA;

  constructor(event: StopRampA) {
    this._event = event;
  }

  get A(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get t(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StableSwap extends ethereum.SmartContract {
  static bind(address: Address): StableSwap {
    return new StableSwap("StableSwap", address);
  }

  get_virtual_price(): BigInt {
    let result = super.call(
      "get_virtual_price",
      "get_virtual_price():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_get_virtual_price(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_virtual_price",
      "get_virtual_price():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calc_token_amount(amounts: Array<BigInt>, deposit: boolean): BigInt {
    let result = super.call(
      "calc_token_amount",
      "calc_token_amount(uint256[2],bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromBoolean(deposit)
      ]
    );

    return result[0].toBigInt();
  }

  try_calc_token_amount(
    amounts: Array<BigInt>,
    deposit: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calc_token_amount",
      "calc_token_amount(uint256[2],bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromBoolean(deposit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_dy(i: BigInt, j: BigInt, dx: BigInt): BigInt {
    let result = super.call(
      "get_dy",
      "get_dy(int128,int128,uint256):(uint256)",
      [
        ethereum.Value.fromSignedBigInt(i),
        ethereum.Value.fromSignedBigInt(j),
        ethereum.Value.fromUnsignedBigInt(dx)
      ]
    );

    return result[0].toBigInt();
  }

  try_get_dy(i: BigInt, j: BigInt, dx: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_dy",
      "get_dy(int128,int128,uint256):(uint256)",
      [
        ethereum.Value.fromSignedBigInt(i),
        ethereum.Value.fromSignedBigInt(j),
        ethereum.Value.fromUnsignedBigInt(dx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  get_dy_underlying(i: BigInt, j: BigInt, dx: BigInt): BigInt {
    let result = super.call(
      "get_dy_underlying",
      "get_dy_underlying(int128,int128,uint256):(uint256)",
      [
        ethereum.Value.fromSignedBigInt(i),
        ethereum.Value.fromSignedBigInt(j),
        ethereum.Value.fromUnsignedBigInt(dx)
      ]
    );

    return result[0].toBigInt();
  }

  try_get_dy_underlying(
    i: BigInt,
    j: BigInt,
    dx: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "get_dy_underlying",
      "get_dy_underlying(int128,int128,uint256):(uint256)",
      [
        ethereum.Value.fromSignedBigInt(i),
        ethereum.Value.fromSignedBigInt(j),
        ethereum.Value.fromUnsignedBigInt(dx)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  coins(arg0: BigInt): Address {
    let result = super.call("coins", "coins(int128):(address)", [
      ethereum.Value.fromSignedBigInt(arg0)
    ]);

    return result[0].toAddress();
  }

  try_coins(arg0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("coins", "coins(int128):(address)", [
      ethereum.Value.fromSignedBigInt(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  underlying_coins(arg0: BigInt): Address {
    let result = super.call(
      "underlying_coins",
      "underlying_coins(int128):(address)",
      [ethereum.Value.fromSignedBigInt(arg0)]
    );

    return result[0].toAddress();
  }

  try_underlying_coins(arg0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "underlying_coins",
      "underlying_coins(int128):(address)",
      [ethereum.Value.fromSignedBigInt(arg0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balances(arg0: BigInt): BigInt {
    let result = super.call("balances", "balances(int128):(uint256)", [
      ethereum.Value.fromSignedBigInt(arg0)
    ]);

    return result[0].toBigInt();
  }

  try_balances(arg0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balances", "balances(int128):(uint256)", [
      ethereum.Value.fromSignedBigInt(arg0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  A(): BigInt {
    let result = super.call("A", "A():(uint256)", []);

    return result[0].toBigInt();
  }

  try_A(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("A", "A():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  admin_fee(): BigInt {
    let result = super.call("admin_fee", "admin_fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_admin_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("admin_fee", "admin_fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  admin_actions_deadline(): BigInt {
    let result = super.call(
      "admin_actions_deadline",
      "admin_actions_deadline():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_admin_actions_deadline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "admin_actions_deadline",
      "admin_actions_deadline():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer_ownership_deadline(): BigInt {
    let result = super.call(
      "transfer_ownership_deadline",
      "transfer_ownership_deadline():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_transfer_ownership_deadline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transfer_ownership_deadline",
      "transfer_ownership_deadline():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  future_A(): BigInt {
    let result = super.call("future_A", "future_A():(uint256)", []);

    return result[0].toBigInt();
  }

  try_future_A(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("future_A", "future_A():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  future_fee(): BigInt {
    let result = super.call("future_fee", "future_fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_future_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("future_fee", "future_fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  future_admin_fee(): BigInt {
    let result = super.call(
      "future_admin_fee",
      "future_admin_fee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_future_admin_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "future_admin_fee",
      "future_admin_fee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  future_owner(): Address {
    let result = super.call("future_owner", "future_owner():(address)", []);

    return result[0].toAddress();
  }

  try_future_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("future_owner", "future_owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}
